
### Problem:
Given two strings `s1` and `s2`, find the length of their longest common subsequence. A subsequence is a sequence that appears in the same relative order, but not necessarily contiguously.

### Example:
- `s1 = "ABCBDAB"`
- `s2 = "BDCAB"`

The longest common subsequence is "BCAB" with length 4.

### Solution:
We can solve this problem using dynamic programming. We'll create a 2D array `dp` where `dp[i][j]` represents the length of the LCS of the substrings `s1[0...i-1]` and `s2[0...j-1]`.



### Explanation:
1. **Initialization:**
   - `s1` and `s2` are the input strings.
   - `m` is the length of `s1`.
   - `k` is the length of `s2`.
   - `dp` is a 2D array where `dp[i][j]` stores the length of the LCS of `s1[0...i-1]` and `s2[0...j-1]`.

2. **Building the dp Array:**
   - Iterate over each character in `s1` and `s2` using two nested loops.
   - If the characters `s1[i-1]` and `s2[j-1]` are the same, then `dp[i][j]` is `dp[i-1][j-1] + 1` because we can extend the LCS found so far by this matching character.
   - If the characters are different, then `dp[i][j]` is the maximum of the LCS without the current character of `s1` (`dp[i-1][j]`) and without the current character of `s2` (`dp[i][j-1]`).

3. **Result:**
   - The length of the LCS is found in `dp[m][k]`.

### Code Execution Example:
For `s1 = "ABCBDAB"` and `s2 = "BDCAB"`, the `dp` table will be built as follows:

```
      B  D  C  A  B
   0  0  0  0  0  0
A  0  0  0  0  1  1
B  0  1  1  1  1  2
C  0  1  1  2  2  2
B  0  1  1  2  2  3
D  0  1  2  2  2  3
A  0  1  2  2  3  3
B  0  1  2  2  3  4
```

The value at `dp[7][5]` (bottom-right corner) is 4, which is the length of the longest common subsequence "BCAB".
