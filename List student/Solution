import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;

class Student {
    String name;
    ArrayList<Integer> grades;

    public Student(String name) {
        this.name = name;
        this.grades = new ArrayList<>();
    }

    public void addGrade(int grade) {
        grades.add(grade);
    }

    public double getAverageGrade() {
        if (grades.isEmpty()) {
            return 0;
        }
        int sum = 0;
        for (int grade : grades) {
            sum += grade;
        }
        return (double) sum / grades.size();
    }
}

public class StudentManager {
    private static HashMap<String, Student> students = new HashMap<>();

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String command;
        System.out.println("Welcome to the Student Manager!");
        printMenu();

        while (true) {
            System.out.print("Enter command: ");
            command = scanner.nextLine().trim().toLowerCase();

            switch (command) {
                case "add student":
                    addStudent(scanner);
                    break;
                case "add grade":
                    addGrade(scanner);
                    break;
                case "average grade":
                    displayAverageGrade(scanner);
                    break;
                case "highest average":
                    displayHighestAverage();
                    break;
                case "exit":
                    System.out.println("Exiting the program.");
                    return;
                default:
                    System.out.println("Unknown command. Please try again.");
                    printMenu();
            }
        }
    }

    private static void printMenu() {
        System.out.println("Available commands:");
        System.out.println("add student - Add a new student");
        System.out.println("add grade - Add grades for a student");
        System.out.println("average grade - Display the average grade for a student");
        System.out.println("highest average - Display the student with the highest average grade");
        System.out.println("exit - Exit the program");
    }

    private static void addStudent(Scanner scanner) {
        System.out.print("Enter student name: ");
        String name = scanner.nextLine();
        if (students.containsKey(name)) {
            System.out.println("Student already exists.");
        } else {
            students.put(name, new Student(name));
            System.out.println("Student added successfully.");
        }
    }

    private static void addGrade(Scanner scanner) {
        System.out.print("Enter student name: ");
        String name = scanner.nextLine();
        Student student = students.get(name);
        if (student == null) {
            System.out.println("Student not found.");
            return;
        }
        System.out.print("Enter grade: ");
        try {
            int grade = Integer.parseInt(scanner.nextLine());
            student.addGrade(grade);
            System.out.println("Grade added successfully.");
        } catch (NumberFormatException e) {
            System.out.println("Invalid grade. Please enter a numeric value.");
        }
    }

    private static void displayAverageGrade(Scanner scanner) {
        System.out.print("Enter student name: ");
        String name = scanner.nextLine();
        Student student = students.get(name);
        if (student == null) {
            System.out.println("Student not found.");
        } else {
            System.out.printf("Average grade for %s: %.2f%n", name, student.getAverageGrade());
        }
    }

    private static void displayHighestAverage() {
        if (students.isEmpty()) {
            System.out.println("No students available.");
            return;
        }
        Student topStudent = null;
        double highestAverage = -1;
        for (Student student : students.values()) {
            double average = student.getAverageGrade();
            if (average > highestAverage) {
                highestAverage = average;
                topStudent = student;
            }
        }
        if (topStudent != null) {
            System.out.printf("Student with the highest average grade: %s (%.2f)%n", topStudent.name, highestAverage);
        }
    }
}
